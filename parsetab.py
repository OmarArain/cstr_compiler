
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTHENleftELSECONST_INT CONST_STRING IDENT ASSIGNMENT LESS EQUAL GREATER LESSEQUAL GREATEREQUAL NOTEQUAL ADD SUBTRACT MULTIPLY DIVIDE SHIFTLEFT SHIFTRIGHT MODULO LPARENS RPARENS SEMICOLON LBRACKET RBRACKET COMMA WHILE FOR STRING RETURN EXTERN THEN DO IF INT ELSEprogram : external_declarationprogram : program external_declarationexternal_declaration : declarationexternal_declaration : EXTERN declarationexternal_declaration : function_definitionfunction_definition : type function_declarator compound_instructiondeclaration : type declarator_list SEMICOLONtype : INTtype : STRINGdeclarator_list : declaratordeclarator_list : declaration_list COMMA declaratordeclaration_list : declarationdeclaration_list : declaration_list declarationdeclarator : IDENTdeclarator : function_declaratorfunction_declarator : IDENT LPARENS RPARENSfunction_declarator : IDENT LPARENS parameter_list RPARENSparameter_list : parameter_declarationparameter_list : parameter_list COMMA parameter_declarationparameter_declaration : type IDENTinstruction : SEMICOLONinstruction : compound_instructioninstruction : expression_instructioninstruction : iteration_instructioninstruction : select_instructioninstruction : jump_instructionexpression_instruction : expression SEMICOLONexpression_instruction : assignment SEMICOLONassignment : IDENT ASSIGNMENT expressioncompound_instruction : block_start declaration_list instruction_list block_endcompound_instruction : block_start declaration_list block_endcompound_instruction : block_start instruction_list block_endcompound_instruction : block_start block_endblock_start : LBRACKETblock_end : RBRACKETinstruction_list : instructioninstruction_list : instruction_list instructionselect_instruction  : cond_instruction THEN instructionselect_instruction  : cond_instruction THEN instruction ELSE instructioncond_instruction  : IF LPARENS condition RPARENSiteration_instruction : WHILE LPARENS condition RPARENS instructioniteration_instruction : DO instruction WHILE LPARENS condition RPARENSiteration_instruction : FOR LPARENS assignment SEMICOLON condition SEMICOLON assignment RPARENS instructionjump_instruction  : RETURN expression SEMICOLONcondition : expression comparison_operator expressioncomparison_operator : EQUALcomparison_operator : NOTEQUALcomparison_operator : LESScomparison_operator : GREATERcomparison_operator : LESSEQUALcomparison_operator : GREATEREQUALexpression  : expression_additiveexpression : SHIFTLEFT expression_additiveexpression : SHIFTRIGHT expression_additiveexpression_additive : expression_multiplicativeexpression_additive : expression_additive ADD expression_multiplicativeexpression_additive : expression_additive SUBTRACT expression_multiplicativeexpression_multiplicative : unary_expressionexpression_multiplicative : expression_multiplicative MULTIPLY unary_expressionexpression_multiplicative : expression_multiplicative DIVIDE unary_expressionexpression_multiplicative : expression_multiplicative MODULO unary_expressionunary_expression : postfix_expressionunary_expression : SUBTRACT unary_expressionpostfix_expression : primary_expressionpostfix_expression : IDENT LPARENS argument_expression_list RPARENSpostfix_expression : IDENT LPARENS RPARENSargument_expression_list : expressionargument_expression_list : argument_expression_list COMMA expressionprimary_expression : IDENTprimary_expression : CONST_INTprimary_expression : CONST_STRINGprimary_expression : LPARENS expression RPARENS'
    
_lr_action_items = {'ADD':([28,34,43,46,48,49,50,52,65,66,68,70,94,95,96,97,99,103,104,121,],[-71,-64,-70,-55,-62,-69,-58,81,-63,-69,81,81,-61,-59,-60,-72,-66,-56,-57,-65,]),'MULTIPLY':([28,34,43,46,48,49,50,65,66,94,95,96,97,99,103,104,121,],[-71,-64,-70,75,-62,-69,-58,-63,-69,-61,-59,-60,-72,-66,75,75,-65,]),'RETURN':([12,20,22,23,25,27,29,30,37,38,39,41,42,44,53,55,57,63,64,67,71,72,85,86,90,102,108,110,122,124,128,130,133,134,],[-12,51,-34,-7,-13,-25,-21,-35,-26,51,-36,51,-23,-22,-24,-33,51,-27,-28,51,-32,-37,51,-31,-38,-44,-30,51,51,-39,-41,-42,51,-43,]),'CONST_STRING':([12,20,22,23,25,27,29,30,33,36,37,38,39,40,41,42,44,47,51,53,55,57,63,64,67,71,72,73,74,75,76,78,79,81,82,83,85,86,90,102,108,110,111,113,114,115,116,117,118,119,120,122,123,124,128,130,133,134,],[-12,28,-34,-7,-13,-25,-21,-35,28,28,-26,28,-36,28,28,-23,-22,28,28,-24,-33,28,-27,-28,28,-32,-37,28,28,28,28,28,28,28,28,28,28,-31,-38,-44,-30,28,28,-49,-46,-48,-47,-51,28,-50,28,28,28,-39,-41,-42,28,-43,]),'SEMICOLON':([12,13,14,15,17,18,19,20,22,23,25,27,28,29,30,31,32,34,37,38,39,41,42,43,44,46,48,49,50,52,53,55,57,58,60,63,64,65,66,67,68,70,71,72,80,85,86,88,90,94,95,96,97,99,101,102,103,104,107,108,110,121,122,124,126,128,129,130,133,134,],[-12,-15,-10,23,-14,-15,-14,29,-34,-7,-13,-25,-71,-21,-35,63,64,-64,-26,29,-36,29,-23,-70,-22,-55,-62,-69,-58,-52,-24,-33,29,-11,-16,-27,-28,-63,-69,29,-54,-53,-32,-37,102,29,-31,-17,-38,-61,-59,-60,-72,-66,-29,-44,-56,-57,123,-30,29,-65,29,-39,-45,-41,131,-42,29,-43,]),'LBRACKET':([12,13,20,22,23,25,27,29,30,37,38,39,41,42,44,53,55,57,60,63,64,67,71,72,85,86,88,90,102,108,110,122,124,128,130,133,134,],[-12,22,22,-34,-7,-13,-25,-21,-35,-26,22,-36,22,-23,-22,-24,-33,22,-16,-27,-28,22,-32,-37,22,-31,-17,-38,-44,-30,22,22,-39,-41,-42,22,-43,]),'RBRACKET':([12,20,22,23,25,27,29,30,37,39,41,42,44,53,55,57,63,64,71,72,85,86,90,102,108,124,128,130,134,],[-12,30,-34,-7,-13,-25,-21,-35,-26,-36,30,-23,-22,-24,-33,30,-27,-28,-32,-37,30,-31,-38,-44,-30,-39,-41,-42,-43,]),'IF':([12,20,22,23,25,27,29,30,37,38,39,41,42,44,53,55,57,63,64,67,71,72,85,86,90,102,108,110,122,124,128,130,133,134,],[-12,45,-34,-7,-13,-25,-21,-35,-26,45,-36,45,-23,-22,-24,-33,45,-27,-28,45,-32,-37,45,-31,-38,-44,-30,45,45,-39,-41,-42,45,-43,]),'COMMA':([12,16,23,25,28,34,43,46,48,50,52,59,61,65,66,68,70,89,94,95,96,97,98,99,100,103,104,109,121,127,],[-12,24,-7,-13,-71,-64,-70,-55,-62,-58,-52,-18,87,-63,-69,-54,-53,-20,-61,-59,-60,-72,-67,-66,120,-56,-57,-19,-65,-68,]),'GREATER':([28,34,43,46,48,50,52,65,66,68,70,93,94,95,96,97,99,103,104,121,],[-71,-64,-70,-55,-62,-58,-52,-63,-69,-54,-53,113,-61,-59,-60,-72,-66,-56,-57,-65,]),'STRING':([0,1,2,3,4,5,6,7,8,9,10,11,12,16,20,21,22,23,25,26,30,55,57,71,86,87,108,],[6,-3,-5,-1,6,6,-9,-8,6,-4,6,-2,-12,6,6,-6,-34,-7,-13,6,-35,-33,6,-32,-31,6,-30,]),'LPARENS':([12,17,19,20,22,23,25,27,29,30,33,36,37,38,39,40,41,42,44,45,47,49,51,53,54,55,56,57,63,64,66,67,71,72,73,74,75,76,78,79,81,82,83,85,86,90,91,102,108,110,111,113,114,115,116,117,118,119,120,122,123,124,128,130,133,134,],[-12,26,26,47,-34,-7,-13,-25,-21,-35,47,47,-26,47,-36,47,47,-23,-22,73,47,78,47,-24,83,-33,84,47,-27,-28,78,47,-32,-37,47,47,47,47,47,47,47,47,47,47,-31,-38,111,-44,-30,47,47,-49,-46,-48,-47,-51,47,-50,47,47,47,-39,-41,-42,47,-43,]),'ELSE':([27,29,30,37,42,44,53,55,63,64,71,86,90,102,108,124,128,130,134,],[-25,-21,-35,-26,-23,-22,-24,-33,-27,-28,-32,-31,110,-44,-30,-39,-41,-42,-43,]),'INT':([0,1,2,3,4,5,6,7,8,9,10,11,12,16,20,21,22,23,25,26,30,55,57,71,86,87,108,],[7,-3,-5,-1,7,7,-9,-8,7,-4,7,-2,-12,7,7,-6,-34,-7,-13,7,-35,-33,7,-32,-31,7,-30,]),'GREATEREQUAL':([28,34,43,46,48,50,52,65,66,68,70,93,94,95,96,97,99,103,104,121,],[-71,-64,-70,-55,-62,-58,-52,-63,-69,-54,-53,117,-61,-59,-60,-72,-66,-56,-57,-65,]),'IDENT':([6,7,8,10,12,20,22,23,24,25,27,29,30,33,36,37,38,39,40,41,42,44,47,51,53,55,57,62,63,64,67,71,72,73,74,75,76,78,79,81,82,83,84,85,86,90,102,108,110,111,113,114,115,116,117,118,119,120,122,123,124,128,130,131,133,134,],[-9,-8,17,19,-12,49,-34,-7,19,-13,-25,-21,-35,66,66,-26,49,-36,66,49,-23,-22,66,66,-24,-33,49,89,-27,-28,49,-32,-37,66,66,66,66,66,66,66,66,66,106,49,-31,-38,-44,-30,49,66,-49,-46,-48,-47,-51,66,-50,66,49,66,-39,-41,-42,106,49,-43,]),'SUBTRACT':([12,20,22,23,25,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,57,63,64,65,66,67,68,70,71,72,73,74,75,76,78,79,81,82,83,85,86,90,94,95,96,97,99,102,103,104,108,110,111,113,114,115,116,117,118,119,120,121,122,123,124,128,130,133,134,],[-12,33,-34,-7,-13,-25,-71,-21,-35,33,-64,33,-26,33,-36,33,33,-23,-70,-22,-55,33,-62,-69,-58,33,82,-24,-33,33,-27,-28,-63,-69,33,82,82,-32,-37,33,33,33,33,33,33,33,33,33,33,-31,-38,-61,-59,-60,-72,-66,-44,-56,-57,-30,33,33,-49,-46,-48,-47,-51,33,-50,33,-65,33,33,-39,-41,-42,33,-43,]),'DIVIDE':([28,34,43,46,48,49,50,65,66,94,95,96,97,99,103,104,121,],[-71,-64,-70,76,-62,-69,-58,-63,-69,-61,-59,-60,-72,-66,76,76,-65,]),'CONST_INT':([12,20,22,23,25,27,29,30,33,36,37,38,39,40,41,42,44,47,51,53,55,57,63,64,67,71,72,73,74,75,76,78,79,81,82,83,85,86,90,102,108,110,111,113,114,115,116,117,118,119,120,122,123,124,128,130,133,134,],[-12,43,-34,-7,-13,-25,-21,-35,43,43,-26,43,-36,43,43,-23,-22,43,43,-24,-33,43,-27,-28,43,-32,-37,43,43,43,43,43,43,43,43,43,43,-31,-38,-44,-30,43,43,-49,-46,-48,-47,-51,43,-50,43,43,43,-39,-41,-42,43,-43,]),'LESS':([28,34,43,46,48,50,52,65,66,68,70,93,94,95,96,97,99,103,104,121,],[-71,-64,-70,-55,-62,-58,-52,-63,-69,-54,-53,115,-61,-59,-60,-72,-66,-56,-57,-65,]),'FOR':([12,20,22,23,25,27,29,30,37,38,39,41,42,44,53,55,57,63,64,67,71,72,85,86,90,102,108,110,122,124,128,130,133,134,],[-12,56,-34,-7,-13,-25,-21,-35,-26,56,-36,56,-23,-22,-24,-33,56,-27,-28,56,-32,-37,56,-31,-38,-44,-30,56,56,-39,-41,-42,56,-43,]),'SHIFTRIGHT':([12,20,22,23,25,27,29,30,37,38,39,41,42,44,47,51,53,55,57,63,64,67,71,72,73,78,79,83,85,86,90,102,108,110,111,113,114,115,116,117,118,119,120,122,123,124,128,130,133,134,],[-12,36,-34,-7,-13,-25,-21,-35,-26,36,-36,36,-23,-22,36,36,-24,-33,36,-27,-28,36,-32,-37,36,36,36,36,36,-31,-38,-44,-30,36,36,-49,-46,-48,-47,-51,36,-50,36,36,36,-39,-41,-42,36,-43,]),'LESSEQUAL':([28,34,43,46,48,50,52,65,66,68,70,93,94,95,96,97,99,103,104,121,],[-71,-64,-70,-55,-62,-58,-52,-63,-69,-54,-53,119,-61,-59,-60,-72,-66,-56,-57,-65,]),'NOTEQUAL':([28,34,43,46,48,50,52,65,66,68,70,93,94,95,96,97,99,103,104,121,],[-71,-64,-70,-55,-62,-58,-52,-63,-69,-54,-53,116,-61,-59,-60,-72,-66,-56,-57,-65,]),'WHILE':([12,20,22,23,25,27,29,30,37,38,39,41,42,44,53,55,57,63,64,67,69,71,72,85,86,90,102,108,110,122,124,128,130,133,134,],[-12,54,-34,-7,-13,-25,-21,-35,-26,54,-36,54,-23,-22,-24,-33,54,-27,-28,54,91,-32,-37,54,-31,-38,-44,-30,54,54,-39,-41,-42,54,-43,]),'DO':([12,20,22,23,25,27,29,30,37,38,39,41,42,44,53,55,57,63,64,67,71,72,85,86,90,102,108,110,122,124,128,130,133,134,],[-12,38,-34,-7,-13,-25,-21,-35,-26,38,-36,38,-23,-22,-24,-33,38,-27,-28,38,-32,-37,38,-31,-38,-44,-30,38,38,-39,-41,-42,38,-43,]),'EQUAL':([28,34,43,46,48,50,52,65,66,68,70,93,94,95,96,97,99,103,104,121,],[-71,-64,-70,-55,-62,-58,-52,-63,-69,-54,-53,114,-61,-59,-60,-72,-66,-56,-57,-65,]),'RPARENS':([26,28,34,43,46,48,50,52,59,61,65,66,68,70,77,78,89,92,94,95,96,97,98,99,100,101,103,104,105,109,121,125,126,127,132,],[60,-71,-64,-70,-55,-62,-58,-52,-18,88,-63,-69,-54,-53,97,99,-20,112,-61,-59,-60,-72,-67,-66,121,-29,-56,-57,122,-19,-65,130,-45,-68,133,]),'$end':([1,2,3,5,9,11,21,23,30,55,71,86,108,],[-3,-5,-1,0,-4,-2,-6,-7,-35,-33,-32,-31,-30,]),'ASSIGNMENT':([49,106,],[79,79,]),'SHIFTLEFT':([12,20,22,23,25,27,29,30,37,38,39,41,42,44,47,51,53,55,57,63,64,67,71,72,73,78,79,83,85,86,90,102,108,110,111,113,114,115,116,117,118,119,120,122,123,124,128,130,133,134,],[-12,40,-34,-7,-13,-25,-21,-35,-26,40,-36,40,-23,-22,40,40,-24,-33,40,-27,-28,40,-32,-37,40,40,40,40,40,-31,-38,-44,-30,40,40,-49,-46,-48,-47,-51,40,-50,40,40,40,-39,-41,-42,40,-43,]),'EXTERN':([0,1,2,3,5,9,11,21,23,30,55,71,86,108,],[4,-3,-5,-1,4,-4,-2,-6,-7,-35,-33,-32,-31,-30,]),'MODULO':([28,34,43,46,48,49,50,65,66,94,95,96,97,99,103,104,121,],[-71,-64,-70,74,-62,-69,-58,-63,-69,-61,-59,-60,-72,-66,74,74,-65,]),'THEN':([35,112,],[67,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_instruction':([20,38,41,57,67,85,110,122,133,],[42,42,42,42,42,42,42,42,42,]),'comparison_operator':([93,],[118,]),'function_definition':([0,5,],[2,2,]),'compound_instruction':([13,20,38,41,57,67,85,110,122,133,],[21,44,44,44,44,44,44,44,44,44,]),'declarator_list':([8,10,],[15,15,]),'external_declaration':([0,5,],[3,11,]),'declarator':([8,10,24,],[14,14,58,]),'expression_multiplicative':([20,36,38,40,41,47,51,57,67,73,78,79,81,82,83,85,110,111,118,120,122,123,133,],[46,46,46,46,46,46,46,46,46,46,46,46,103,104,46,46,46,46,46,46,46,46,46,]),'parameter_declaration':([26,87,],[59,109,]),'postfix_expression':([20,33,36,38,40,41,47,51,57,67,73,74,75,76,78,79,81,82,83,85,110,111,118,120,122,123,133,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'assignment':([20,38,41,57,67,84,85,110,122,131,133,],[32,32,32,32,32,107,32,32,32,132,32,]),'expression':([20,38,41,47,51,57,67,73,78,79,83,85,110,111,118,120,122,123,133,],[31,31,31,77,80,31,31,93,98,101,93,31,31,93,126,127,31,93,31,]),'select_instruction':([20,38,41,57,67,85,110,122,133,],[27,27,27,27,27,27,27,27,27,]),'type':([0,4,5,8,10,16,20,26,57,87,],[8,10,8,10,10,10,10,62,10,62,]),'block_end':([20,41,57,85,],[55,71,86,108,]),'unary_expression':([20,33,36,38,40,41,47,51,57,67,73,74,75,76,78,79,81,82,83,85,110,111,118,120,122,123,133,],[50,65,50,50,50,50,50,50,50,50,50,94,95,96,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'declaration':([0,4,5,8,10,16,20,57,],[1,9,1,12,12,25,12,25,]),'parameter_list':([26,],[61,]),'primary_expression':([20,33,36,38,40,41,47,51,57,67,73,74,75,76,78,79,81,82,83,85,110,111,118,120,122,123,133,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'block_start':([13,20,38,41,57,67,85,110,122,133,],[20,20,20,20,20,20,20,20,20,20,]),'cond_instruction':([20,38,41,57,67,85,110,122,133,],[35,35,35,35,35,35,35,35,35,]),'expression_additive':([20,36,38,40,41,47,51,57,67,73,78,79,83,85,110,111,118,120,122,123,133,],[52,68,52,70,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'function_declarator':([8,10,24,],[13,18,18,]),'iteration_instruction':([20,38,41,57,67,85,110,122,133,],[53,53,53,53,53,53,53,53,53,]),'jump_instruction':([20,38,41,57,67,85,110,122,133,],[37,37,37,37,37,37,37,37,37,]),'program':([0,],[5,]),'condition':([73,83,111,123,],[92,105,125,129,]),'declaration_list':([8,10,20,],[16,16,57,]),'instruction':([20,38,41,57,67,85,110,122,133,],[39,69,72,39,90,72,124,128,134,]),'argument_expression_list':([78,],[100,]),'instruction_list':([20,57,],[41,85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> external_declaration','program',1,'p_program_1','cstr_parser.py',78),
  ('program -> program external_declaration','program',2,'p_program_2','cstr_parser.py',81),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_1','cstr_parser.py',84),
  ('external_declaration -> EXTERN declaration','external_declaration',2,'p_external_declaration_2','cstr_parser.py',87),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_3','cstr_parser.py',90),
  ('function_definition -> type function_declarator compound_instruction','function_definition',3,'p_function_definition','cstr_parser.py',93),
  ('declaration -> type declarator_list SEMICOLON','declaration',3,'p_declaration','cstr_parser.py',99),
  ('type -> INT','type',1,'p_type_1','cstr_parser.py',102),
  ('type -> STRING','type',1,'p_type_2','cstr_parser.py',105),
  ('declarator_list -> declarator','declarator_list',1,'p_declarator_list_1','cstr_parser.py',108),
  ('declarator_list -> declaration_list COMMA declarator','declarator_list',3,'p_declarator_list_2','cstr_parser.py',111),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','cstr_parser.py',114),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','cstr_parser.py',117),
  ('declarator -> IDENT','declarator',1,'p_declarator_1','cstr_parser.py',120),
  ('declarator -> function_declarator','declarator',1,'p_declarator_2','cstr_parser.py',123),
  ('function_declarator -> IDENT LPARENS RPARENS','function_declarator',3,'p_function_declarator_1','cstr_parser.py',126),
  ('function_declarator -> IDENT LPARENS parameter_list RPARENS','function_declarator',4,'p_function_declarator_2','cstr_parser.py',129),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','cstr_parser.py',132),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2','cstr_parser.py',135),
  ('parameter_declaration -> type IDENT','parameter_declaration',2,'p_parameter_declaration','cstr_parser.py',138),
  ('instruction -> SEMICOLON','instruction',1,'p_instruction_1','cstr_parser.py',141),
  ('instruction -> compound_instruction','instruction',1,'p_instruction_2','cstr_parser.py',144),
  ('instruction -> expression_instruction','instruction',1,'p_instruction_3','cstr_parser.py',147),
  ('instruction -> iteration_instruction','instruction',1,'p_instruction_4','cstr_parser.py',150),
  ('instruction -> select_instruction','instruction',1,'p_instruction_5','cstr_parser.py',153),
  ('instruction -> jump_instruction','instruction',1,'p_instruction_6','cstr_parser.py',156),
  ('expression_instruction -> expression SEMICOLON','expression_instruction',2,'p_expression_instruction1','cstr_parser.py',159),
  ('expression_instruction -> assignment SEMICOLON','expression_instruction',2,'p_expression_instruction2','cstr_parser.py',162),
  ('assignment -> IDENT ASSIGNMENT expression','assignment',3,'p_assignment','cstr_parser.py',165),
  ('compound_instruction -> block_start declaration_list instruction_list block_end','compound_instruction',4,'p_compound_instruction_1','cstr_parser.py',168),
  ('compound_instruction -> block_start declaration_list block_end','compound_instruction',3,'p_compound_instruction_2','cstr_parser.py',171),
  ('compound_instruction -> block_start instruction_list block_end','compound_instruction',3,'p_compound_instruction_3','cstr_parser.py',174),
  ('compound_instruction -> block_start block_end','compound_instruction',2,'p_compound_instruction_4','cstr_parser.py',177),
  ('block_start -> LBRACKET','block_start',1,'p_block_start','cstr_parser.py',181),
  ('block_end -> RBRACKET','block_end',1,'p_block_end','cstr_parser.py',185),
  ('instruction_list -> instruction','instruction_list',1,'p_instruction_list1','cstr_parser.py',190),
  ('instruction_list -> instruction_list instruction','instruction_list',2,'p_instruction_list2','cstr_parser.py',193),
  ('select_instruction -> cond_instruction THEN instruction','select_instruction',3,'p_select_instruction_1','cstr_parser.py',196),
  ('select_instruction -> cond_instruction THEN instruction ELSE instruction','select_instruction',5,'p_select_instruction_2','cstr_parser.py',199),
  ('cond_instruction -> IF LPARENS condition RPARENS','cond_instruction',4,'p_cond_instruction','cstr_parser.py',202),
  ('iteration_instruction -> WHILE LPARENS condition RPARENS instruction','iteration_instruction',5,'p_iteration_instruction_1','cstr_parser.py',205),
  ('iteration_instruction -> DO instruction WHILE LPARENS condition RPARENS','iteration_instruction',6,'p_iteration_instruction_2','cstr_parser.py',208),
  ('iteration_instruction -> FOR LPARENS assignment SEMICOLON condition SEMICOLON assignment RPARENS instruction','iteration_instruction',9,'p_iteration_instruction_3','cstr_parser.py',211),
  ('jump_instruction -> RETURN expression SEMICOLON','jump_instruction',3,'p_jump_instruction','cstr_parser.py',214),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','cstr_parser.py',217),
  ('comparison_operator -> EQUAL','comparison_operator',1,'p_comparison_operator_1','cstr_parser.py',220),
  ('comparison_operator -> NOTEQUAL','comparison_operator',1,'p_comparison_operator_2','cstr_parser.py',223),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator_3','cstr_parser.py',226),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator_4','cstr_parser.py',229),
  ('comparison_operator -> LESSEQUAL','comparison_operator',1,'p_comparison_operator_5','cstr_parser.py',232),
  ('comparison_operator -> GREATEREQUAL','comparison_operator',1,'p_comparison_operator_6','cstr_parser.py',235),
  ('expression -> expression_additive','expression',1,'p_expression_1','cstr_parser.py',238),
  ('expression -> SHIFTLEFT expression_additive','expression',2,'p_expression_2','cstr_parser.py',241),
  ('expression -> SHIFTRIGHT expression_additive','expression',2,'p_expression_3','cstr_parser.py',244),
  ('expression_additive -> expression_multiplicative','expression_additive',1,'p_expression_additive_1','cstr_parser.py',247),
  ('expression_additive -> expression_additive ADD expression_multiplicative','expression_additive',3,'p_expression_additive_2','cstr_parser.py',250),
  ('expression_additive -> expression_additive SUBTRACT expression_multiplicative','expression_additive',3,'p_expression_additive_3','cstr_parser.py',253),
  ('expression_multiplicative -> unary_expression','expression_multiplicative',1,'p_expression_multiplicative_1','cstr_parser.py',256),
  ('expression_multiplicative -> expression_multiplicative MULTIPLY unary_expression','expression_multiplicative',3,'p_expression_multiplicative_2','cstr_parser.py',259),
  ('expression_multiplicative -> expression_multiplicative DIVIDE unary_expression','expression_multiplicative',3,'p_expression_multiplicative_3','cstr_parser.py',262),
  ('expression_multiplicative -> expression_multiplicative MODULO unary_expression','expression_multiplicative',3,'p_expression_multiplicative_4','cstr_parser.py',265),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','cstr_parser.py',269),
  ('unary_expression -> SUBTRACT unary_expression','unary_expression',2,'p_unary_expression_2','cstr_parser.py',273),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','cstr_parser.py',277),
  ('postfix_expression -> IDENT LPARENS argument_expression_list RPARENS','postfix_expression',4,'p_postfix_expression_2','cstr_parser.py',281),
  ('postfix_expression -> IDENT LPARENS RPARENS','postfix_expression',3,'p_postfix_expression_3','cstr_parser.py',285),
  ('argument_expression_list -> expression','argument_expression_list',1,'p_argument_expression_list_1','cstr_parser.py',289),
  ('argument_expression_list -> argument_expression_list COMMA expression','argument_expression_list',3,'p_argument_expression_list_2','cstr_parser.py',293),
  ('primary_expression -> IDENT','primary_expression',1,'p_primary_expression_1','cstr_parser.py',297),
  ('primary_expression -> CONST_INT','primary_expression',1,'p_primary_expression_2','cstr_parser.py',301),
  ('primary_expression -> CONST_STRING','primary_expression',1,'p_primary_expression_3','cstr_parser.py',305),
  ('primary_expression -> LPARENS expression RPARENS','primary_expression',3,'p_primary_expression_4','cstr_parser.py',310),
]
