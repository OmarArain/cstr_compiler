
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CONST_INT CONST_STRING IDENT ASSIGNMENT LESS EQUAL GREATER LESSEQUAL GREATEREQUAL NOTEQUAL ADD SUBTRACT MULTIPLY DIVIDE SHIFTLEFT SHIFTRIGHT MODULO LPARENS RPARENS SEMICOLON LBRACKET RBRACKET COMMA RETURN WHILE FOR INT STRING EXTERN ELSE DO IFprogram : external_declarationprogram : program external_declarationexternal_declaration : declarationexternal_declaration : EXTERN declarationexternal_declaration : function_definitionfunction_definition : type function_declarator decl_glbl_fct compound_instructiondecl_glbl_fct : declaration : type declarator_list SEMICOLON\n        type : INT\n             | STRING\n        declarator_list : declaratordeclarator_list : declarator_list COMMA declaratordeclaration_list : declarationdeclaration_list : declaration_list declarationdeclarator : IDENTdeclarator : function_declaratorfunction_declarator : IDENT LPARENS RPARENSfunction_declarator : IDENT LPARENS parameter_list RPARENS\n        parameter_list : parameter_declaration\n        \n        parameter_list : parameter_list COMMA parameter_declaration\n        \n        parameter_declaration : type IDENT\n        \n        instruction : SEMICOLON\n                    | compound_instruction\n                    | expression_instruction\n                    | iteration_instruction\n                    | select_instruction\n                    | jump_instruction\n        \n        expression_instruction : expression SEMICOLON\n                               | assignment SEMICOLON\n        \n        assignment : IDENT ASSIGNMENT expression\n        \n        compound_instruction : block_start declaration_list instruction_list block_end\n        \n        compound_instruction : block_start declaration_list block_end\n                             | block_start instruction_list block_end\n        compound_instruction : block_start block_endblock_start : LBRACKETblock_end : RBRACKETinstruction_list : instructioninstruction_list : instruction_list instructionselect_instruction  : cond_instruction instructionselect_instruction  : cond_instruction instruction ELSE instruction\n        cond_instruction  : IF LPARENS condition RPARENS\n        \n        iteration_instruction : WHILE LPARENS condition RPARENS instruction\n        \n        iteration_instruction : DO instruction WHILE LPARENS condition RPARENS\n        \n        iteration_instruction : FOR LPARENS assignment SEMICOLON condition SEMICOLON assignment RPARENS instruction\n        \n        jump_instruction  : RETURN expression SEMICOLON\n        \n        condition : expression comparison_operator expression\n        \n        comparison_operator : EQUAL\n                            | NOTEQUAL\n                            | LESS\n                            | GREATER\n                            | LESSEQUAL\n                            | GREATEREQUAL\n        expression  : expression_additive\n        expression : expression SHIFTLEFT expression_additive\n                   | expression SHIFTRIGHT expression_additive\n        \n        expression_additive : expression_multiplicative\n        \n        expression_additive : expression_additive ADD expression_multiplicative\n                            | expression_additive SUBTRACT expression_multiplicative\n        expression_multiplicative : unary_expression\n        expression_multiplicative : expression_multiplicative MULTIPLY unary_expression\n                                  | expression_multiplicative DIVIDE unary_expression\n                                  | expression_multiplicative MODULO unary_expression\n        unary_expression : postfix_expressionunary_expression : SUBTRACT unary_expressionpostfix_expression : primary_expressionpostfix_expression : IDENT LPARENS argument_expression_list RPARENSpostfix_expression : IDENT LPARENS RPARENSargument_expression_list : expressionargument_expression_list : argument_expression_list COMMA expressionprimary_expression : IDENTprimary_expression : CONST_INT\n        primary_expression : CONST_STRING\n        \n        primary_expression : LPARENS expression RPARENS\n        '
    
_lr_action_items = {'CONST_INT':([16,23,25,36,39,40,42,43,46,48,49,50,51,52,53,54,55,56,58,59,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,84,85,86,98,107,108,110,111,112,114,115,116,117,118,119,120,121,122,123,126,130,132,133,],[-8,45,-35,45,-24,45,-23,-36,-25,-27,-37,45,45,-22,-26,45,-13,-34,45,45,-28,45,45,-29,45,45,45,-38,-33,45,45,-39,45,45,45,45,45,-14,-32,45,-45,-31,45,-40,45,45,-50,-52,-47,-51,-48,45,-49,-41,45,-42,-43,45,-44,]),'STRING':([0,2,4,6,7,8,9,14,16,19,23,24,25,43,55,56,58,61,71,85,86,108,],[1,1,-3,-1,-5,1,-2,-4,-8,1,1,-6,-35,-36,-13,-34,1,1,-33,-14,-32,-31,]),'EQUAL':([30,32,34,35,38,45,57,81,82,89,90,91,92,93,96,97,100,104,106,113,],[-63,-72,-59,-56,-53,-71,-65,-70,-64,-55,-54,-62,-61,-60,-58,-57,-67,117,-73,-66,]),'$end':([2,4,6,7,9,14,16,24,43,56,71,86,108,],[0,-3,-1,-5,-2,-4,-8,-6,-36,-34,-33,-32,-31,]),'MULTIPLY':([30,32,34,35,41,45,57,81,82,91,92,93,96,97,100,106,113,],[-63,-72,-59,69,-70,-71,-65,-70,-64,-62,-61,-60,69,69,-67,-73,-66,]),'ELSE':([39,42,43,46,48,52,53,56,63,66,71,75,86,107,108,111,126,130,133,],[-24,-23,-36,-25,-27,-22,-26,-34,-28,-29,-33,98,-32,-45,-31,-40,-42,-43,-44,]),'LESS':([30,32,34,35,38,45,57,81,82,89,90,91,92,93,96,97,100,104,106,113,],[-63,-72,-59,-56,-53,-71,-65,-70,-64,-55,-54,-62,-61,-60,-58,-57,-67,121,-73,-66,]),'INT':([0,2,4,6,7,8,9,14,16,19,23,24,25,43,55,56,58,61,71,85,86,108,],[3,3,-3,-1,-5,3,-2,-4,-8,3,3,-6,-35,-36,-13,-34,3,3,-33,-14,-32,-31,]),'MODULO':([30,32,34,35,41,45,57,81,82,91,92,93,96,97,100,106,113,],[-63,-72,-59,67,-70,-71,-65,-70,-64,-62,-61,-60,67,67,-67,-73,-66,]),'DIVIDE':([30,32,34,35,41,45,57,81,82,91,92,93,96,97,100,106,113,],[-63,-72,-59,68,-70,-71,-65,-70,-64,-62,-61,-60,68,68,-67,-73,-66,]),'COMMA':([10,11,12,13,20,21,22,27,28,29,30,32,34,35,38,45,57,60,62,81,82,88,89,90,91,92,93,96,97,100,101,102,106,113,125,],[17,-16,-15,-11,-15,-16,-12,-19,61,-17,-63,-72,-59,-56,-53,-71,-65,-21,-18,-70,-64,-20,-55,-54,-62,-61,-60,-58,-57,-67,-68,112,-73,-66,-69,]),'NOTEQUAL':([30,32,34,35,38,45,57,81,82,89,90,91,92,93,96,97,100,104,106,113,],[-63,-72,-59,-56,-53,-71,-65,-70,-64,-55,-54,-62,-61,-60,-58,-57,-67,119,-73,-66,]),'SUBTRACT':([16,23,25,30,32,34,35,36,38,39,40,41,42,43,45,46,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,81,82,84,85,86,89,90,91,92,93,96,97,98,100,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,130,132,133,],[-8,51,-35,-63,-72,-59,-56,51,73,-24,51,-70,-23,-36,-71,-25,-27,-37,51,51,-22,-26,51,-13,-34,-65,51,51,-28,51,51,-29,51,51,51,-38,-33,51,51,-39,51,51,51,51,-70,-64,51,-14,-32,73,73,-62,-61,-60,-58,-57,51,-67,-73,-45,-31,51,-40,51,-66,51,-50,-52,-47,-51,-48,51,-49,-41,51,-42,-43,51,-44,]),'GREATEREQUAL':([30,32,34,35,38,45,57,81,82,89,90,91,92,93,96,97,100,104,106,113,],[-63,-72,-59,-56,-53,-71,-65,-70,-64,-55,-54,-62,-61,-60,-58,-57,-67,116,-73,-66,]),'EXTERN':([0,2,4,6,7,9,14,16,24,43,56,71,86,108,],[8,8,-3,-1,-5,-2,-4,-8,-6,-36,-34,-33,-32,-31,]),'SHIFTLEFT':([30,31,32,34,35,38,41,45,57,80,81,82,83,89,90,91,92,93,96,97,99,100,101,104,106,113,125,127,],[-63,65,-72,-59,-56,-53,-70,-71,-65,65,-70,-64,65,-55,-54,-62,-61,-60,-58,-57,65,-67,65,65,-73,-66,65,65,]),'WHILE':([16,23,25,36,39,40,42,43,46,48,49,52,53,55,56,58,59,63,66,70,71,75,84,85,86,87,98,107,108,111,114,122,126,130,132,133,],[-8,44,-35,44,-24,44,-23,-36,-25,-27,-37,-22,-26,-13,-34,44,44,-28,-29,-38,-33,-39,44,-14,-32,109,44,-45,-31,-40,44,-41,-42,-43,44,-44,]),'ASSIGNMENT':([41,95,],[76,76,]),'LPARENS':([12,16,20,23,25,36,37,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,58,59,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,81,84,85,86,98,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,126,130,132,133,],[19,-8,19,50,-35,50,72,-24,50,77,-23,-36,78,-25,79,-27,-37,50,50,-22,-26,50,-13,-34,50,50,-28,50,50,-29,50,50,50,-38,-33,50,50,-39,50,50,50,50,77,50,-14,-32,50,-45,-31,123,50,-40,50,50,-50,-52,-47,-51,-48,50,-49,-41,50,-42,-43,50,-44,]),'FOR':([16,23,25,36,39,40,42,43,46,48,49,52,53,55,56,58,59,63,66,70,71,75,84,85,86,98,107,108,111,114,122,126,130,132,133,],[-8,37,-35,37,-24,37,-23,-36,-25,-27,-37,-22,-26,-13,-34,37,37,-28,-29,-38,-33,-39,37,-14,-32,37,-45,-31,-40,37,-41,-42,-43,37,-44,]),'LESSEQUAL':([30,32,34,35,38,45,57,81,82,89,90,91,92,93,96,97,100,104,106,113,],[-63,-72,-59,-56,-53,-71,-65,-70,-64,-55,-54,-62,-61,-60,-58,-57,-67,118,-73,-66,]),'RPARENS':([19,27,28,30,32,34,35,38,45,57,60,77,80,81,82,88,89,90,91,92,93,96,97,99,100,101,102,103,105,106,113,125,127,128,131,],[29,-19,62,-63,-72,-59,-56,-53,-71,-65,-21,100,106,-70,-64,-20,-55,-54,-62,-61,-60,-58,-57,-30,-67,-68,113,114,122,-73,-66,-69,-46,130,132,]),'SEMICOLON':([10,11,12,13,16,20,21,22,23,25,29,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,48,49,52,53,55,56,57,58,59,62,63,66,70,71,75,81,82,83,84,85,86,89,90,91,92,93,94,96,97,98,99,100,106,107,108,111,113,114,122,124,126,127,130,132,133,],[16,-16,-15,-11,-8,-15,-16,-12,52,-35,-17,-63,63,-72,66,-59,-56,52,-53,-24,52,-70,-23,-36,-71,-25,-27,-37,-22,-26,-13,-34,-65,52,52,-18,-28,-29,-38,-33,-39,-70,-64,107,52,-14,-32,-55,-54,-62,-61,-60,110,-58,-57,52,-30,-67,-73,-45,-31,-40,-66,52,-41,129,-42,-46,-43,52,-44,]),'ADD':([30,32,34,35,38,41,45,57,81,82,89,90,91,92,93,96,97,100,106,113,],[-63,-72,-59,-56,74,-70,-71,-65,-70,-64,74,74,-62,-61,-60,-58,-57,-67,-73,-66,]),'RETURN':([16,23,25,36,39,40,42,43,46,48,49,52,53,55,56,58,59,63,66,70,71,75,84,85,86,98,107,108,111,114,122,126,130,132,133,],[-8,54,-35,54,-24,54,-23,-36,-25,-27,-37,-22,-26,-13,-34,54,54,-28,-29,-38,-33,-39,54,-14,-32,54,-45,-31,-40,54,-41,-42,-43,54,-44,]),'IF':([16,23,25,36,39,40,42,43,46,48,49,52,53,55,56,58,59,63,66,70,71,75,84,85,86,98,107,108,111,114,122,126,130,132,133,],[-8,47,-35,47,-24,47,-23,-36,-25,-27,-37,-22,-26,-13,-34,47,47,-28,-29,-38,-33,-39,47,-14,-32,47,-45,-31,-40,47,-41,-42,-43,47,-44,]),'GREATER':([30,32,34,35,38,45,57,81,82,89,90,91,92,93,96,97,100,104,106,113,],[-63,-72,-59,-56,-53,-71,-65,-70,-64,-55,-54,-62,-61,-60,-58,-57,-67,115,-73,-66,]),'SHIFTRIGHT':([30,31,32,34,35,38,41,45,57,80,81,82,83,89,90,91,92,93,96,97,99,100,101,104,106,113,125,127,],[-63,64,-72,-59,-56,-53,-70,-71,-65,64,-70,-64,64,-55,-54,-62,-61,-60,-58,-57,64,-67,64,64,-73,-66,64,64,]),'IDENT':([1,3,5,15,16,17,23,25,26,36,39,40,42,43,46,48,49,50,51,52,53,54,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,84,85,86,98,107,108,110,111,112,114,115,116,117,118,119,120,121,122,123,126,129,130,132,133,],[-10,-9,12,20,-8,20,41,-35,60,41,-24,41,-23,-36,-25,-27,-37,81,81,-22,-26,81,-13,-34,41,41,-28,81,81,-29,81,81,81,-38,-33,95,81,81,-39,81,81,81,81,41,-14,-32,41,-45,-31,81,-40,81,41,-50,-52,-47,-51,-48,81,-49,-41,81,-42,95,-43,41,-44,]),'CONST_STRING':([16,23,25,36,39,40,42,43,46,48,49,50,51,52,53,54,55,56,58,59,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,84,85,86,98,107,108,110,111,112,114,115,116,117,118,119,120,121,122,123,126,130,132,133,],[-8,32,-35,32,-24,32,-23,-36,-25,-27,-37,32,32,-22,-26,32,-13,-34,32,32,-28,32,32,-29,32,32,32,-38,-33,32,32,-39,32,32,32,32,32,-14,-32,32,-45,-31,32,-40,32,32,-50,-52,-47,-51,-48,32,-49,-41,32,-42,-43,32,-44,]),'RBRACKET':([16,23,25,36,39,42,43,46,48,49,52,53,55,56,58,63,66,70,71,75,84,85,86,107,108,111,126,130,133,],[-8,43,-35,43,-24,-23,-36,-25,-27,-37,-22,-26,-13,-34,43,-28,-29,-38,-33,-39,43,-14,-32,-45,-31,-40,-42,-43,-44,]),'DO':([16,23,25,36,39,40,42,43,46,48,49,52,53,55,56,58,59,63,66,70,71,75,84,85,86,98,107,108,111,114,122,126,130,132,133,],[-8,59,-35,59,-24,59,-23,-36,-25,-27,-37,-22,-26,-13,-34,59,59,-28,-29,-38,-33,-39,59,-14,-32,59,-45,-31,-40,59,-41,-42,-43,59,-44,]),'LBRACKET':([11,16,18,23,25,29,36,39,40,42,43,46,48,49,52,53,55,56,58,59,62,63,66,70,71,75,84,85,86,98,107,108,111,114,122,126,130,132,133,],[-7,-8,25,25,-35,-17,25,-24,25,-23,-36,-25,-27,-37,-22,-26,-13,-34,25,25,-18,-28,-29,-38,-33,-39,25,-14,-32,25,-45,-31,-40,25,-41,-42,-43,25,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'iteration_instruction':([23,36,40,58,59,84,98,114,132,],[46,46,46,46,46,46,46,46,46,]),'block_start':([18,23,36,40,58,59,84,98,114,132,],[23,23,23,23,23,23,23,23,23,23,]),'parameter_list':([19,],[28,]),'postfix_expression':([23,36,40,50,51,54,58,59,64,65,67,68,69,73,74,76,77,78,79,84,98,110,112,114,120,123,132,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'jump_instruction':([23,36,40,58,59,84,98,114,132,],[48,48,48,48,48,48,48,48,48,]),'instruction':([23,36,40,58,59,84,98,114,132,],[49,70,75,49,87,70,111,126,133,]),'assignment':([23,36,40,58,59,72,84,98,114,129,132,],[33,33,33,33,33,94,33,33,33,131,33,]),'decl_glbl_fct':([11,],[18,]),'function_definition':([0,2,],[7,7,]),'declarator':([5,15,17,],[13,13,22,]),'comparison_operator':([104,],[120,]),'expression_multiplicative':([23,36,40,50,54,58,59,64,65,73,74,76,77,78,79,84,98,110,112,114,120,123,132,],[35,35,35,35,35,35,35,35,35,96,97,35,35,35,35,35,35,35,35,35,35,35,35,]),'instruction_list':([23,58,],[36,84,]),'declarator_list':([5,15,],[10,10,]),'function_declarator':([5,15,17,],[11,21,21,]),'program':([0,],[2,]),'expression_instruction':([23,36,40,58,59,84,98,114,132,],[39,39,39,39,39,39,39,39,39,]),'select_instruction':([23,36,40,58,59,84,98,114,132,],[53,53,53,53,53,53,53,53,53,]),'expression_additive':([23,36,40,50,54,58,59,64,65,76,77,78,79,84,98,110,112,114,120,123,132,],[38,38,38,38,38,38,38,89,90,38,38,38,38,38,38,38,38,38,38,38,38,]),'type':([0,2,8,19,23,58,61,],[5,5,15,26,15,15,26,]),'declaration':([0,2,8,23,58,],[4,4,14,55,85,]),'declaration_list':([23,],[58,]),'expression':([23,36,40,50,54,58,59,76,77,78,79,84,98,110,112,114,120,123,132,],[31,31,31,80,83,31,31,99,101,104,104,31,31,104,125,31,127,104,31,]),'block_end':([23,36,58,84,],[56,71,86,108,]),'parameter_declaration':([19,61,],[27,88,]),'argument_expression_list':([77,],[102,]),'primary_expression':([23,36,40,50,51,54,58,59,64,65,67,68,69,73,74,76,77,78,79,84,98,110,112,114,120,123,132,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'external_declaration':([0,2,],[6,9,]),'unary_expression':([23,36,40,50,51,54,58,59,64,65,67,68,69,73,74,76,77,78,79,84,98,110,112,114,120,123,132,],[34,34,34,34,82,34,34,34,34,34,91,92,93,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'condition':([78,79,110,123,],[103,105,124,128,]),'cond_instruction':([23,36,40,58,59,84,98,114,132,],[40,40,40,40,40,40,40,40,40,]),'compound_instruction':([18,23,36,40,58,59,84,98,114,132,],[24,42,42,42,42,42,42,42,42,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> external_declaration','program',1,'p_program_1','cstr_parser.py',37),
  ('program -> program external_declaration','program',2,'p_program_2','cstr_parser.py',41),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_1','cstr_parser.py',46),
  ('external_declaration -> EXTERN declaration','external_declaration',2,'p_external_declaration_2','cstr_parser.py',50),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_3','cstr_parser.py',55),
  ('function_definition -> type function_declarator decl_glbl_fct compound_instruction','function_definition',4,'p_function_definition','cstr_parser.py',60),
  ('decl_glbl_fct -> <empty>','decl_glbl_fct',0,'p_decl_gbl_fct','cstr_parser.py',94),
  ('declaration -> type declarator_list SEMICOLON','declaration',3,'p_declaration','cstr_parser.py',99),
  ('type -> INT','type',1,'p_type_1','cstr_parser.py',130),
  ('type -> STRING','type',1,'p_type_1','cstr_parser.py',131),
  ('declarator_list -> declarator','declarator_list',1,'p_declarator_list_1','cstr_parser.py',137),
  ('declarator_list -> declarator_list COMMA declarator','declarator_list',3,'p_declarator_list_2','cstr_parser.py',142),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','cstr_parser.py',148),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','cstr_parser.py',153),
  ('declarator -> IDENT','declarator',1,'p_declarator_1','cstr_parser.py',163),
  ('declarator -> function_declarator','declarator',1,'p_declarator_2','cstr_parser.py',174),
  ('function_declarator -> IDENT LPARENS RPARENS','function_declarator',3,'p_function_declarator_1','cstr_parser.py',178),
  ('function_declarator -> IDENT LPARENS parameter_list RPARENS','function_declarator',4,'p_function_declarator_2','cstr_parser.py',194),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','cstr_parser.py',213),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2','cstr_parser.py',219),
  ('parameter_declaration -> type IDENT','parameter_declaration',2,'p_parameter_declaration','cstr_parser.py',226),
  ('instruction -> SEMICOLON','instruction',1,'p_instruction_1','cstr_parser.py',235),
  ('instruction -> compound_instruction','instruction',1,'p_instruction_1','cstr_parser.py',236),
  ('instruction -> expression_instruction','instruction',1,'p_instruction_1','cstr_parser.py',237),
  ('instruction -> iteration_instruction','instruction',1,'p_instruction_1','cstr_parser.py',238),
  ('instruction -> select_instruction','instruction',1,'p_instruction_1','cstr_parser.py',239),
  ('instruction -> jump_instruction','instruction',1,'p_instruction_1','cstr_parser.py',240),
  ('expression_instruction -> expression SEMICOLON','expression_instruction',2,'p_expression_instruction1','cstr_parser.py',248),
  ('expression_instruction -> assignment SEMICOLON','expression_instruction',2,'p_expression_instruction1','cstr_parser.py',249),
  ('assignment -> IDENT ASSIGNMENT expression','assignment',3,'p_assignment','cstr_parser.py',256),
  ('compound_instruction -> block_start declaration_list instruction_list block_end','compound_instruction',4,'p_compound_instruction_1','cstr_parser.py',271),
  ('compound_instruction -> block_start declaration_list block_end','compound_instruction',3,'p_compound_instruction_2','cstr_parser.py',278),
  ('compound_instruction -> block_start instruction_list block_end','compound_instruction',3,'p_compound_instruction_2','cstr_parser.py',279),
  ('compound_instruction -> block_start block_end','compound_instruction',2,'p_compound_instruction_4','cstr_parser.py',285),
  ('block_start -> LBRACKET','block_start',1,'p_block_start','cstr_parser.py',290),
  ('block_end -> RBRACKET','block_end',1,'p_block_end','cstr_parser.py',306),
  ('instruction_list -> instruction','instruction_list',1,'p_instruction_list1','cstr_parser.py',312),
  ('instruction_list -> instruction_list instruction','instruction_list',2,'p_instruction_list2','cstr_parser.py',317),
  ('select_instruction -> cond_instruction instruction','select_instruction',2,'p_select_instruction_1','cstr_parser.py',323),
  ('select_instruction -> cond_instruction instruction ELSE instruction','select_instruction',4,'p_select_instruction_2','cstr_parser.py',327),
  ('cond_instruction -> IF LPARENS condition RPARENS','cond_instruction',4,'p_cond_instruction','cstr_parser.py',332),
  ('iteration_instruction -> WHILE LPARENS condition RPARENS instruction','iteration_instruction',5,'p_iteration_instruction_1','cstr_parser.py',337),
  ('iteration_instruction -> DO instruction WHILE LPARENS condition RPARENS','iteration_instruction',6,'p_iteration_instruction_2','cstr_parser.py',343),
  ('iteration_instruction -> FOR LPARENS assignment SEMICOLON condition SEMICOLON assignment RPARENS instruction','iteration_instruction',9,'p_iteration_instruction_3','cstr_parser.py',349),
  ('jump_instruction -> RETURN expression SEMICOLON','jump_instruction',3,'p_jump_instruction','cstr_parser.py',356),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','cstr_parser.py',362),
  ('comparison_operator -> EQUAL','comparison_operator',1,'p_comparison_operator_1','cstr_parser.py',370),
  ('comparison_operator -> NOTEQUAL','comparison_operator',1,'p_comparison_operator_1','cstr_parser.py',371),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator_1','cstr_parser.py',372),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator_1','cstr_parser.py',373),
  ('comparison_operator -> LESSEQUAL','comparison_operator',1,'p_comparison_operator_1','cstr_parser.py',374),
  ('comparison_operator -> GREATEREQUAL','comparison_operator',1,'p_comparison_operator_1','cstr_parser.py',375),
  ('expression -> expression_additive','expression',1,'p_expression_1','cstr_parser.py',380),
  ('expression -> expression SHIFTLEFT expression_additive','expression',3,'p_expression_2','cstr_parser.py',385),
  ('expression -> expression SHIFTRIGHT expression_additive','expression',3,'p_expression_2','cstr_parser.py',386),
  ('expression_additive -> expression_multiplicative','expression_additive',1,'p_expression_additive_1','cstr_parser.py',392),
  ('expression_additive -> expression_additive ADD expression_multiplicative','expression_additive',3,'p_expression_additive_2','cstr_parser.py',398),
  ('expression_additive -> expression_additive SUBTRACT expression_multiplicative','expression_additive',3,'p_expression_additive_2','cstr_parser.py',399),
  ('expression_multiplicative -> unary_expression','expression_multiplicative',1,'p_expression_multiplicative_1','cstr_parser.py',404),
  ('expression_multiplicative -> expression_multiplicative MULTIPLY unary_expression','expression_multiplicative',3,'p_expression_multiplicative_2','cstr_parser.py',409),
  ('expression_multiplicative -> expression_multiplicative DIVIDE unary_expression','expression_multiplicative',3,'p_expression_multiplicative_2','cstr_parser.py',410),
  ('expression_multiplicative -> expression_multiplicative MODULO unary_expression','expression_multiplicative',3,'p_expression_multiplicative_2','cstr_parser.py',411),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','cstr_parser.py',416),
  ('unary_expression -> SUBTRACT unary_expression','unary_expression',2,'p_unary_expression_2','cstr_parser.py',420),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','cstr_parser.py',424),
  ('postfix_expression -> IDENT LPARENS argument_expression_list RPARENS','postfix_expression',4,'p_postfix_expression_2','cstr_parser.py',428),
  ('postfix_expression -> IDENT LPARENS RPARENS','postfix_expression',3,'p_postfix_expression_3','cstr_parser.py',432),
  ('argument_expression_list -> expression','argument_expression_list',1,'p_argument_expression_list_1','cstr_parser.py',438),
  ('argument_expression_list -> argument_expression_list COMMA expression','argument_expression_list',3,'p_argument_expression_list_2','cstr_parser.py',443),
  ('primary_expression -> IDENT','primary_expression',1,'p_primary_expression_1','cstr_parser.py',450),
  ('primary_expression -> CONST_INT','primary_expression',1,'p_primary_expression_2','cstr_parser.py',464),
  ('primary_expression -> CONST_STRING','primary_expression',1,'p_primary_expression_3','cstr_parser.py',471),
  ('primary_expression -> LPARENS expression RPARENS','primary_expression',3,'p_primary_expression_4','cstr_parser.py',478),
]
