CSTR Compiler
====================
#### MPCS 51300 Compilers
##### Omar Arain

To run my compiler:

cpp -E -P targetfile.c -o clean_targetfile.c
python3 CSTR_Compiler/cstr_parser.py clean_targetfile.c
gcc clean_targetfile.c 
This will output a clean_targetfile.s file in the asm directory, which
you can then compile normally with gcc.  The .s file uses x86 assembly
targeted to the University of Chicago linux machines available at 
linux1.cs.uchicago.edu.



My code currently passes the following tests that were provided:
- add.c
- cond.c
- div.c
- expr.c
- functions.c



I used the following tools to build my compiler:
- python3 (python2 may work)
- Python Lex-Yacc 
	(http://www.dabeaz.com/ply/)
- A script to generate code for an AST object in Python.
	(https://github.com/eliben/pycparser/blob/master/pycparser/_ast_gen.py)

The code for my compiler, along with the Python Lex-Yacc library and
the AST generation script, are in the CSTR_Compiler directory.

The files that I wrote myself (without a script) are:
- CSTR_Compiler/cstr_parser.py (the driver)
- CSTR_Compiler/cstr_lexer.py
- CSTR_Compiler/cstr_symtab.py
- CSTR_Compiler/cstr_codewriter.py
- CSTR_Compiler/ast_cfg.cfg (the AST specification)

I included the Python Lex-Yacc module in the CSTR_Compiler/ply_lib directory.
I DID NOT WRITE THAT.

The cstr_ast.py file was generated by running the make_ast.py script, which 
uses the info in the ast_cfg.cfg file to generate Python code.



